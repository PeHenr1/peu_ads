inicialmente o CÓDIGO FONTE (seu programa) é compilado - já verifica se há erros e se houver, ja mostra antes mesmo de terminar de compilar
em seguida é gerado o CÓDIGO OBJETO que vai LINKAR com bibliotecas necessárias pra poder executar o programa, gerando o CÓDIGO EXECUTÁVEL ".exe"

função main() --> FUNÇÃO PRINCIPAL

qualquer variável dentro de uma função é uma variavel local, de resto é variável global

============================================================
EXEMPLO: 

#include <nome_biblioteca>

declaração de variável global

tipo retorno main()
{ bloco de comando }

tipo de retorno f1(lista de parâmetros)
{ bloco de comando }

...

tipo de retorno fn(lista de parâmetros)
{ bloco de comando }

============================================================

TIPO
      char - 1 caractere 				char a = 'A';
      int - num inteiro					int b = 12;
      float - numero real com precisao simples		float c = 2.34f;
      double - numero real com precisao dupla 	 	double d = 2.34;

      void "permite fazer funções que não retornam nada e funções que não têm parâmetros"

caractere - aspas simples ' ' // "string" - aspas duplas ""

============================================================

MODIFICADORES DE TIPOS
      signed: num com sinal
      unsigned: num apenas +
      long: aumenta precisão
      short: reduz precisão

ex: 	int normal:
	Valores de -32768 até 32767

	unsigned int:
	Valores de 0 a 65535

============================================================

0 é falso e qualquer outra porra é verdadeiro

	NEGAÇÃO !  //  E &&  //  OU || 

============================================================

COMENTÁRIO

// 	uma linha
/* */ 	várias linhas

============================================================

COMANDOS DE ENTRADA

SCANF
- problemático com string "carlos josé" só pega carlos
- Sintaxe: scanf(“formato”, &variável);
!!!!!!!! SEMPRE USE SCANF("formato"%*c, &variável) PRA DESCARTAR O ENTER !!!!!!!! 

GETS
- pega tudo
- gets(nome)
ex: 
     char nome[30]; (consegue armazenar 29 caracteres, se nao tiver nada é só 1)
     gets(nome);
     printf("nome: %s \n", nome);
	

COMANDO DE SÁIDA

printf()

============================================================

MÁSCARAS DE FORMATAÇÃO

 Símbolo ‘%’ seguido de uma letra:

– %c Caractere
– %d Inteiros com sinal
- %s Cadeia de caracteres (strings) PREFIRA O GETS!
– %u Inteiros sem sinal
– %f Números reais (float)
– %lf Números reais (double ou long float)
– %e Notação científica
– %x Números em hexadecimal

============================================================

FUNÇÕES MATEMÁTICAS

biblioteca <math.h>

- ceil(X): arredonda um número real para cima   EX: ceil(3.2) = 4
– floor(X): arredonda um número real para baixo Ex: ceil(3.2) = 3
– sqrt(X): calcula a raiz quadrada de X
– cbrt(X): calcula a raiz cúbica de X

============================================================

SINTAXE
switch(variavel):
	case x:
		blablabla
	case y:
		blablabla
	default:
		blablabla

============================================================

STRINGS EM C

* para usar apóstrofo, barra, aspas tem que usar uma barra invertida antes. EX: "caixa d\' agua" --> caixa d'agua
* tomar cuidado pra o espaço de memoria de uma variavel não tomar o espaço de outra

leitura:
 - %s: le até espaço  tab ou enter, ou seja, nao pega "pedro h", pega só pedroc (nao recomendado
 - gets: lê até achar o enter, nao define qtde de caracteres e pode ter problema de overflow (sobrescrever) (leva warning do geany)
 - fgets (quando usar arquivo): lê até achar o enter, define caracteres e sem problema de overflow, te, parametros (vetor, qtde de caracteres e origem dos dados >stdin<) apesar disso ele tem problemas

exibição:
- printf, que nao pula linha sozinha
- puts, que exibe somente string e pula linha sozinho


char teste[11] - um vetor que age como string com 10 caracteres (uma linha) | LINHA 
char teste[5][11] - 5 vetores que agem como string com 10 caracteres (cinco linhas e onze colunas) | LINHA / COLUNA
char teste[3][5][5] - 3 vetores que agem como string com 5 colunas e 4 caracteres cada (tres linhas com cinco colunas de tamanho 4) | LINHA / COLUNA / TAMANHO

↓↓↓ FUNÇÕES ↓↓↓

COPIAR STRING
* biblioteca <string.h> 
* strcpy(queRecebe,queVaiSerCopiada) 
** strcpy(queRecebe,queVaiSerCopiada,qtde_caracter) especifica o tamanho

CONCATENAR STRINGS (tem que especificar o espaço antes)
* strcat(str1,str2) - concatena a cadeia str2 com a cadeia str1 */
* strncat(str1,str2,n) - concatena os n primeiros caracteres da cadeia str2  com a cadeia str1 

COMPARAR STRINGS (compara duas strings e retornar)
* variavel = strcmp(str1,str2)
* retorna 0 - se as strings forem iguais
* retorna nº < 0 - caso str1 seja alfabeticamente menor que str2
* retorna nº > 0 - caso str1 for alfabeticamente maior que str2

PEGAR Nº DE CARACTERES DA CADEIA (sem o terminador)
* variavel = strlen(str1) - retorna o tamanho

CONVERTE STRING PRA Nº INT E PRA Nº REAL    (precisa da biblioteca <stdlib.h>)
int numero = atoi(string)
double numero = strtod(string, NULL);

↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑

biblioteca <ctype.h> - funções para manipular caracteres (char)
(RETORNA 0 SE É FALSO E QUALQUER Nº POSITIVO SE VERDADEIRO)
...verifica se x é:
* isalnum(x) - caracter alfanumérico
* isalpha(x) - caracter alfabetico
* isdigit(x) - caracter dígito
* islower(x) - caracter minúsculo
* isupper(x) - caracter maiúsculo
* ispunct(x) - caracter pontuação
* isspace(x) - se é espaço

Conversão de strings para maiúsculas ou minúsculas (caracter por caracter)
* tolower(x) - converte pra minusculo
* toupper(x) - converte pra maiusculo




